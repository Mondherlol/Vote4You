{% extends 'base.html.twig' %}

{% block title %}New Utilisateur{% endblock %}

{% block body %}
    <link rel="stylesheet" href="{{ asset('css/newUser.css') }}">

    <div class="form-container sondage-form">
        <h1 class="title">Inscrivez-vous</h1>

        {{ form_start(form, {'attr': {'class': 'form'}}) }}

        <div class="form-group">
            {{ form_label(form.pseudo, 'Nom d\'utilisateur', {'label_attr': {'class': 'form-label'}}) }}
            {{ form_widget(form.pseudo, {'attr': {'class': 'form-control', 'placeholder': 'Entrez votre nom d\'utilisateur'}}) }}
        </div>

        <div class="form-group">
            {{ form_label(form.email, 'Email', {'label_attr': {'class': 'form-label'}}) }}
            {{ form_widget(form.email, {'attr': {'class': 'form-control', 'placeholder': 'Entrez votre adresse email'}}) }}
        </div>

        <div class="form-group">
            <label for="utilisateur_password" class="form-label">Mot de passe</label>
            <input type="password" id="utilisateur_password" name="utilisateur[password]" class="form-control" placeholder="Entrez un mot de passe sécurisé" required>
        </div>

        <div class="form-group">
            <label for="confirmPassword" class="form-label">Confirmer le mdp</label>
            <input type="password" id="confirmPassword" class="form-control" placeholder="Confirmez votre mot de passe" required>
            <small id="passwordHelp" class="text-danger d-none">Les mots de passe ne correspondent pas</small>
        </div>

        <div class="form-group">
            <label for="image-upload" class="form-label">Photo de profil (optionnel)</label>
            <div id="dropzone" class="dropzone position-relative text-center">
                <div class="upload-content">
                    <input type="file" id="image-upload" name="image" class="d-none">
                    <img src="{{ asset('css/bx-cloud-upload.svg') }}" alt="Upload" class="upload-icon">
                    <p>Glissez-déposez une image ici ou <strong>cliquez ici</strong> pour en sélectionner une</p>
                </div>
                <img id="image-preview" src="#" alt="Aperçu de l'image" class="d-none img-fluid">
            </div>
            <small id="imageError" class="text-danger d-none">Veuillez sélectionner une image valide (JPG/PNG).</small>
        </div>

        <div class="form-group">
            <button type="submit" class="btn-primary">Créer</button>
        </div>

        {{ form_end(form) }}
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const password = document.getElementById('password');
            const confirmPassword = document.getElementById('confirmPassword');
            const passwordHelp = document.getElementById('passwordHelp');

            // Validation des mots de passe
            confirmPassword.addEventListener('input', () => {
                if (password.value !== confirmPassword.value) {
                    passwordHelp.classList.remove('d-none');
                } else {
                    passwordHelp.classList.add('d-none');
                }
            });

            // Gestion du drag-and-drop pour l'image de profil
            const dropzone = document.getElementById('profilePictureDropzone');
            const fileInput = document.getElementById('profilePictureInput');
            const preview = document.getElementById('profilePicturePreview');

            dropzone.addEventListener('click', () => fileInput.click());

            fileInput.addEventListener('change', () => {
                const file = fileInput.files[0];
                if (file) {
                    preview.src = URL.createObjectURL(file);
                    preview.classList.remove('d-none');
                    dropzone.classList.add('d-none');
                }
            });

            dropzone.addEventListener('dragover', (e) => {
                e.preventDefault();
                dropzone.style.backgroundColor = 'rgba(0, 0, 0, 0.3)';
            });

            dropzone.addEventListener('dragleave', () => {
                dropzone.style.backgroundColor = 'transparent';
            });

            dropzone.addEventListener('drop', (e) => {
                e.preventDefault();
                const file = e.dataTransfer.files[0];
                if (file) {
                    fileInput.files = e.dataTransfer.files;
                    preview.src = URL.createObjectURL(file);
                    preview.classList.remove('d-none');
                    dropzone.classList.add('d-none');
                }
            });
        });


        // Images


        document.addEventListener('DOMContentLoaded', function () {
            const dropzone = document.getElementById('dropzone');
            const fileInput = document.getElementById('image-upload');
            const imagePreview = document.getElementById('image-preview');

            dropzone.addEventListener('click', () => {
                fileInput.click();
            });

            dropzone.addEventListener('drop', (e) => {
                e.preventDefault();
                handleFile(e.dataTransfer.files[0]);
            });

            fileInput.addEventListener('change', () => {
                handleFile(fileInput.files[0]);
            });

            function handleFile(file) {
                if (file && file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        imagePreview.src = e.target.result;
                        imagePreview.classList.remove('d-none');
                    };
                    reader.readAsDataURL(file);
                }
            }
        });


    </script>
{% endblock %}
